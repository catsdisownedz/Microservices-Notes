/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/obsidian-daily-notes-interface/dist/main.js
var require_main = __commonJS({
  "node_modules/obsidian-daily-notes-interface/dist/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var obsidian = require("obsidian");
    var DEFAULT_DAILY_NOTE_FORMAT = "YYYY-MM-DD";
    var DEFAULT_WEEKLY_NOTE_FORMAT = "gggg-[W]ww";
    var DEFAULT_MONTHLY_NOTE_FORMAT = "YYYY-MM";
    var DEFAULT_QUARTERLY_NOTE_FORMAT = "YYYY-[Q]Q";
    var DEFAULT_YEARLY_NOTE_FORMAT = "YYYY";
    function shouldUsePeriodicNotesSettings(periodicity) {
      var _a, _b;
      const periodicNotes = window.app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a[periodicity]) == null ? void 0 : _b.enabled);
    }
    function getDailyNoteSettings() {
      var _a, _b, _c, _d;
      try {
        const { internalPlugins, plugins } = window.app;
        if (shouldUsePeriodicNotesSettings("daily")) {
          const { format: format2, folder: folder2, template: template2 } = ((_b = (_a = plugins.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.daily) || {};
          return {
            format: format2 || DEFAULT_DAILY_NOTE_FORMAT,
            folder: (folder2 == null ? void 0 : folder2.trim()) || "",
            template: (template2 == null ? void 0 : template2.trim()) || ""
          };
        }
        const { folder, format, template } = ((_d = (_c = internalPlugins.getPluginById("daily-notes")) == null ? void 0 : _c.instance) == null ? void 0 : _d.options) || {};
        return {
          format: format || DEFAULT_DAILY_NOTE_FORMAT,
          folder: (folder == null ? void 0 : folder.trim()) || "",
          template: (template == null ? void 0 : template.trim()) || ""
        };
      } catch (err) {
        console.info("No custom daily note settings found!", err);
      }
    }
    function getWeeklyNoteSettings() {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pluginManager = window.app.plugins;
        const calendarSettings = (_a = pluginManager.getPlugin("calendar")) == null ? void 0 : _a.options;
        const periodicNotesSettings = (_c = (_b = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _b.settings) == null ? void 0 : _c.weekly;
        if (shouldUsePeriodicNotesSettings("weekly")) {
          return {
            format: periodicNotesSettings.format || DEFAULT_WEEKLY_NOTE_FORMAT,
            folder: ((_d = periodicNotesSettings.folder) == null ? void 0 : _d.trim()) || "",
            template: ((_e = periodicNotesSettings.template) == null ? void 0 : _e.trim()) || ""
          };
        }
        const settings = calendarSettings || {};
        return {
          format: settings.weeklyNoteFormat || DEFAULT_WEEKLY_NOTE_FORMAT,
          folder: ((_f = settings.weeklyNoteFolder) == null ? void 0 : _f.trim()) || "",
          template: ((_g = settings.weeklyNoteTemplate) == null ? void 0 : _g.trim()) || ""
        };
      } catch (err) {
        console.info("No custom weekly note settings found!", err);
      }
    }
    function getMonthlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("monthly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.monthly) || {};
        return {
          format: settings.format || DEFAULT_MONTHLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom monthly note settings found!", err);
      }
    }
    function getQuarterlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("quarterly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.quarterly) || {};
        return {
          format: settings.format || DEFAULT_QUARTERLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom quarterly note settings found!", err);
      }
    }
    function getYearlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("yearly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.yearly) || {};
        return {
          format: settings.format || DEFAULT_YEARLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom yearly note settings found!", err);
      }
    }
    function join(...partSegments) {
      let parts = [];
      for (let i = 0, l = partSegments.length; i < l; i++) {
        parts = parts.concat(partSegments[i].split("/"));
      }
      const newParts = [];
      for (let i = 0, l = parts.length; i < l; i++) {
        const part = parts[i];
        if (!part || part === ".")
          continue;
        else
          newParts.push(part);
      }
      if (parts[0] === "")
        newParts.unshift("");
      return newParts.join("/");
    }
    function basename(fullPath) {
      let base = fullPath.substring(fullPath.lastIndexOf("/") + 1);
      if (base.lastIndexOf(".") != -1)
        base = base.substring(0, base.lastIndexOf("."));
      return base;
    }
    async function ensureFolderExists(path) {
      const dirs = path.replace(/\\/g, "/").split("/");
      dirs.pop();
      if (dirs.length) {
        const dir = join(...dirs);
        if (!window.app.vault.getAbstractFileByPath(dir)) {
          await window.app.vault.createFolder(dir);
        }
      }
    }
    async function getNotePath(directory, filename) {
      if (!filename.endsWith(".md")) {
        filename += ".md";
      }
      const path = obsidian.normalizePath(join(directory, filename));
      await ensureFolderExists(path);
      return path;
    }
    async function getTemplateInfo(template) {
      const { metadataCache, vault } = window.app;
      const templatePath = obsidian.normalizePath(template);
      if (templatePath === "/") {
        return Promise.resolve(["", null]);
      }
      try {
        const templateFile = metadataCache.getFirstLinkpathDest(templatePath, "");
        const contents = await vault.cachedRead(templateFile);
        const IFoldInfo = window.app.foldManager.load(templateFile);
        return [contents, IFoldInfo];
      } catch (err) {
        console.error(`Failed to read the daily note template '${templatePath}'`, err);
        new obsidian.Notice("Failed to read the daily note template");
        return ["", null];
      }
    }
    function getDateUID(date, granularity = "day") {
      const ts = date.clone().startOf(granularity).format();
      return `${granularity}-${ts}`;
    }
    function removeEscapedCharacters(format) {
      return format.replace(/\[[^\]]*\]/g, "");
    }
    function isFormatAmbiguous(format, granularity) {
      if (granularity === "week") {
        const cleanFormat = removeEscapedCharacters(format);
        return /w{1,2}/i.test(cleanFormat) && (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat));
      }
      return false;
    }
    function getDateFromFile(file, granularity) {
      return getDateFromFilename(file.basename, granularity);
    }
    function getDateFromPath(path, granularity) {
      return getDateFromFilename(basename(path), granularity);
    }
    function getDateFromFilename(filename, granularity) {
      const getSettings = {
        day: getDailyNoteSettings,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      };
      const format = getSettings[granularity]().format.split("/").pop();
      const noteDate = window.moment(filename, format, true);
      if (!noteDate.isValid()) {
        return null;
      }
      if (isFormatAmbiguous(format, granularity)) {
        if (granularity === "week") {
          const cleanFormat = removeEscapedCharacters(format);
          if (/w{1,2}/i.test(cleanFormat)) {
            return window.moment(
              filename,
              // If format contains week, remove day & month formatting
              format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""),
              false
            );
          }
        }
      }
      return noteDate;
    }
    var DailyNotesFolderMissingError = class extends Error {
    };
    async function createDailyNote2(date) {
      const app2 = window.app;
      const { vault } = app2;
      const moment2 = window.moment;
      const { template, format, folder } = getDailyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, moment2().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = moment2();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*yesterday\s*}}/gi, date.clone().subtract(1, "day").format(format)).replace(/{{\s*tomorrow\s*}}/gi, date.clone().add(1, "d").format(format)));
        app2.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getDailyNote2(date, dailyNotes) {
      var _a;
      return (_a = dailyNotes[getDateUID(date, "day")]) != null ? _a : null;
    }
    function getAllDailyNotes2() {
      const { vault } = window.app;
      const { folder } = getDailyNoteSettings();
      const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!dailyNotesFolder) {
        throw new DailyNotesFolderMissingError("Failed to find daily notes folder");
      }
      const dailyNotes = {};
      obsidian.Vault.recurseChildren(dailyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "day");
          if (date) {
            const dateString = getDateUID(date, "day");
            dailyNotes[dateString] = note;
          }
        }
      });
      return dailyNotes;
    }
    var WeeklyNotesFolderMissingError = class extends Error {
    };
    function getDaysOfWeek() {
      const { moment: moment2 } = window;
      let weekStart = moment2.localeData()._week.dow;
      const daysOfWeek = [
        "sunday",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday"
      ];
      while (weekStart) {
        daysOfWeek.push(daysOfWeek.shift());
        weekStart--;
      }
      return daysOfWeek;
    }
    function getDayOfWeekNumericalValue(dayOfWeekName) {
      return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());
    }
    async function createWeeklyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getWeeklyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {
          const day = getDayOfWeekNumericalValue(dayOfWeek);
          return date.weekday(day).format(momentFormat.trim());
        }));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getWeeklyNote(date, weeklyNotes) {
      var _a;
      return (_a = weeklyNotes[getDateUID(date, "week")]) != null ? _a : null;
    }
    function getAllWeeklyNotes() {
      const weeklyNotes = {};
      if (!appHasWeeklyNotesPluginLoaded()) {
        return weeklyNotes;
      }
      const { vault } = window.app;
      const { folder } = getWeeklyNoteSettings();
      const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!weeklyNotesFolder) {
        throw new WeeklyNotesFolderMissingError("Failed to find weekly notes folder");
      }
      obsidian.Vault.recurseChildren(weeklyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "week");
          if (date) {
            const dateString = getDateUID(date, "week");
            weeklyNotes[dateString] = note;
          }
        }
      });
      return weeklyNotes;
    }
    var MonthlyNotesFolderMissingError = class extends Error {
    };
    async function createMonthlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getMonthlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getMonthlyNote(date, monthlyNotes) {
      var _a;
      return (_a = monthlyNotes[getDateUID(date, "month")]) != null ? _a : null;
    }
    function getAllMonthlyNotes() {
      const monthlyNotes = {};
      if (!appHasMonthlyNotesPluginLoaded()) {
        return monthlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getMonthlyNoteSettings();
      const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!monthlyNotesFolder) {
        throw new MonthlyNotesFolderMissingError("Failed to find monthly notes folder");
      }
      obsidian.Vault.recurseChildren(monthlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "month");
          if (date) {
            const dateString = getDateUID(date, "month");
            monthlyNotes[dateString] = note;
          }
        }
      });
      return monthlyNotes;
    }
    var QuarterlyNotesFolderMissingError = class extends Error {
    };
    async function createQuarterlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getQuarterlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getQuarterlyNote(date, quarterly) {
      var _a;
      return (_a = quarterly[getDateUID(date, "quarter")]) != null ? _a : null;
    }
    function getAllQuarterlyNotes() {
      const quarterly = {};
      if (!appHasQuarterlyNotesPluginLoaded()) {
        return quarterly;
      }
      const { vault } = window.app;
      const { folder } = getQuarterlyNoteSettings();
      const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!quarterlyFolder) {
        throw new QuarterlyNotesFolderMissingError("Failed to find quarterly notes folder");
      }
      obsidian.Vault.recurseChildren(quarterlyFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "quarter");
          if (date) {
            const dateString = getDateUID(date, "quarter");
            quarterly[dateString] = note;
          }
        }
      });
      return quarterly;
    }
    var YearlyNotesFolderMissingError = class extends Error {
    };
    async function createYearlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getYearlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getYearlyNote(date, yearlyNotes) {
      var _a;
      return (_a = yearlyNotes[getDateUID(date, "year")]) != null ? _a : null;
    }
    function getAllYearlyNotes() {
      const yearlyNotes = {};
      if (!appHasYearlyNotesPluginLoaded()) {
        return yearlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getYearlyNoteSettings();
      const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!yearlyNotesFolder) {
        throw new YearlyNotesFolderMissingError("Failed to find yearly notes folder");
      }
      obsidian.Vault.recurseChildren(yearlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile(note, "year");
          if (date) {
            const dateString = getDateUID(date, "year");
            yearlyNotes[dateString] = note;
          }
        }
      });
      return yearlyNotes;
    }
    function appHasDailyNotesPluginLoaded2() {
      var _a, _b;
      const { app: app2 } = window;
      const dailyNotesPlugin = app2.internalPlugins.plugins["daily-notes"];
      if (dailyNotesPlugin && dailyNotesPlugin.enabled) {
        return true;
      }
      const periodicNotes = app2.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.daily) == null ? void 0 : _b.enabled);
    }
    function appHasWeeklyNotesPluginLoaded() {
      var _a, _b;
      const { app: app2 } = window;
      if (app2.plugins.getPlugin("calendar")) {
        return true;
      }
      const periodicNotes = app2.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.weekly) == null ? void 0 : _b.enabled);
    }
    function appHasMonthlyNotesPluginLoaded() {
      var _a, _b;
      const { app: app2 } = window;
      const periodicNotes = app2.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.monthly) == null ? void 0 : _b.enabled);
    }
    function appHasQuarterlyNotesPluginLoaded() {
      var _a, _b;
      const { app: app2 } = window;
      const periodicNotes = app2.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.quarterly) == null ? void 0 : _b.enabled);
    }
    function appHasYearlyNotesPluginLoaded() {
      var _a, _b;
      const { app: app2 } = window;
      const periodicNotes = app2.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.yearly) == null ? void 0 : _b.enabled);
    }
    function getPeriodicNoteSettings(granularity) {
      const getSettings = {
        day: getDailyNoteSettings,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      }[granularity];
      return getSettings();
    }
    function createPeriodicNote(granularity, date) {
      const createFn = {
        day: createDailyNote2,
        month: createMonthlyNote,
        week: createWeeklyNote
      };
      return createFn[granularity](date);
    }
    exports.DEFAULT_DAILY_NOTE_FORMAT = DEFAULT_DAILY_NOTE_FORMAT;
    exports.DEFAULT_MONTHLY_NOTE_FORMAT = DEFAULT_MONTHLY_NOTE_FORMAT;
    exports.DEFAULT_QUARTERLY_NOTE_FORMAT = DEFAULT_QUARTERLY_NOTE_FORMAT;
    exports.DEFAULT_WEEKLY_NOTE_FORMAT = DEFAULT_WEEKLY_NOTE_FORMAT;
    exports.DEFAULT_YEARLY_NOTE_FORMAT = DEFAULT_YEARLY_NOTE_FORMAT;
    exports.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded2;
    exports.appHasMonthlyNotesPluginLoaded = appHasMonthlyNotesPluginLoaded;
    exports.appHasQuarterlyNotesPluginLoaded = appHasQuarterlyNotesPluginLoaded;
    exports.appHasWeeklyNotesPluginLoaded = appHasWeeklyNotesPluginLoaded;
    exports.appHasYearlyNotesPluginLoaded = appHasYearlyNotesPluginLoaded;
    exports.createDailyNote = createDailyNote2;
    exports.createMonthlyNote = createMonthlyNote;
    exports.createPeriodicNote = createPeriodicNote;
    exports.createQuarterlyNote = createQuarterlyNote;
    exports.createWeeklyNote = createWeeklyNote;
    exports.createYearlyNote = createYearlyNote;
    exports.getAllDailyNotes = getAllDailyNotes2;
    exports.getAllMonthlyNotes = getAllMonthlyNotes;
    exports.getAllQuarterlyNotes = getAllQuarterlyNotes;
    exports.getAllWeeklyNotes = getAllWeeklyNotes;
    exports.getAllYearlyNotes = getAllYearlyNotes;
    exports.getDailyNote = getDailyNote2;
    exports.getDailyNoteSettings = getDailyNoteSettings;
    exports.getDateFromFile = getDateFromFile;
    exports.getDateFromPath = getDateFromPath;
    exports.getDateUID = getDateUID;
    exports.getMonthlyNote = getMonthlyNote;
    exports.getMonthlyNoteSettings = getMonthlyNoteSettings;
    exports.getPeriodicNoteSettings = getPeriodicNoteSettings;
    exports.getQuarterlyNote = getQuarterlyNote;
    exports.getQuarterlyNoteSettings = getQuarterlyNoteSettings;
    exports.getTemplateInfo = getTemplateInfo;
    exports.getWeeklyNote = getWeeklyNote;
    exports.getWeeklyNoteSettings = getWeeklyNoteSettings;
    exports.getYearlyNote = getYearlyNote;
    exports.getYearlyNoteSettings = getYearlyNoteSettings;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianRewarder,
  displayModal: () => displayModal,
  getDailyNoteFile: () => getDailyNoteFile
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var import_obsidian_daily_notes_interface = __toESM(require_main());
var import_obsidian_daily_notes_interface2 = __toESM(require_main());

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  completedTaskCharacter: "\u2611\uFE0F",
  escapeCharacterBegin: "{",
  escapeCharacterEnd: "}",
  occurrenceTypes: [
    { label: "common", value: 20 },
    { label: "rare", value: 5 },
    { label: "legendary", value: 0.5 }
  ],
  rewardsFile: "Rewards.md",
  saveRewardToDaily: false,
  saveRewardSectionHeading: void 0,
  saveTaskToDaily: false,
  saveTaskSectionHeading: void 0,
  showModal: true,
  useAsInspirational: false
};
var ObsidianRewarderSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  sanitiseNote(value) {
    if (value === null || value.match(/^\s*$/) !== null) {
      return null;
    }
    return (0, import_obsidian.normalizePath)(value);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Functionality settings" });
    new import_obsidian.Setting(this.containerEl).setName("File with Rewards").setDesc('For example "Rewards.md" or "Folder/Rewards.md"').addText((text) => {
      text.setPlaceholder(DEFAULT_SETTINGS.rewardsFile).setValue(
        this.plugin.settings.rewardsFile.length > 0 ? this.plugin.settings.rewardsFile : ""
      ).onChange(async (value) => {
        this.plugin.settings.rewardsFile = this.sanitiseNote(value) || DEFAULT_SETTINGS.rewardsFile;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(this.containerEl).setName("Show popup when reward is awarded").setDesc("If disabled a less prominent notice will be shown instead").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showModal);
      toggle.onChange(async (value) => {
        this.plugin.settings.showModal = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(this.containerEl).setName("Save rewards in daily note").setDesc("Will save rewards received to the end of the daily note or section heading specified below").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.saveRewardToDaily);
      toggle.onChange(async (value) => {
        this.plugin.settings.saveRewardToDaily = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("The section heading of daily note used to save rewards").setDesc(
      "This section heading is used as the place for saving rewards received in the daily note"
    ).addText(
      (text) => text.setPlaceholder("## Rewards").setValue(
        this.plugin.settings.saveRewardSectionHeading ? this.plugin.settings.saveRewardSectionHeading : ""
      ).onChange(async (value) => {
        if (value.length > 0 && value.match(/^#+/)) {
          this.plugin.settings.saveRewardSectionHeading = value;
          await this.plugin.saveSettings();
        }
      })
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
        this.plugin.settings.saveRewardSectionHeading = DEFAULT_SETTINGS.saveRewardSectionHeading;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Save task in daily note").setDesc("Will save completed tasks to the end of the daily note or section heading specified below").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.saveTaskToDaily);
      toggle.onChange(async (value) => {
        this.plugin.settings.saveTaskToDaily = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("The section heading of daily note used to save tasks").setDesc(
      "This section heading is used as the place for saving the completed tasks in the daily note"
    ).addText(
      (text) => text.setPlaceholder("## CompletedTasks").setValue(
        this.plugin.settings.saveTaskSectionHeading ? this.plugin.settings.saveTaskSectionHeading : ""
      ).onChange(async (value) => {
        if (value.length > 0 && value.match(/^#+/)) {
          this.plugin.settings.saveTaskSectionHeading = value;
          await this.plugin.saveSettings();
        }
      })
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
        this.plugin.settings.saveTaskSectionHeading = DEFAULT_SETTINGS.saveTaskSectionHeading;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName("Use with quotes instead of rewards").setDesc(
      "Rewards are shown as inspirational quotes instead of congratulations"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.useAsInspirational);
      toggle.onChange(async (value) => {
        this.plugin.settings.useAsInspirational = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h1", { text: "Reward settings" });
    containerEl.createEl("h3", {
      text: "Occurrence values"
    });
    for (let i = 0; i < Object.keys(this.plugin.settings.occurrenceTypes).length; i++) {
      new import_obsidian.Setting(containerEl).setName(
        "How often should " + this.plugin.settings.occurrenceTypes[i].label + " rewards occur?"
      ).setDesc(
        "Between 0.1% to 100% for every finished task" + (i === 0 ? ". This is the default value for rewards" : "")
      ).addText((text) => {
        text.inputEl.type = "number";
        text.setPlaceholder(this.plugin.settings.occurrenceTypes[i].value).setValue(this.plugin.settings.occurrenceTypes[i].value.toString()).onChange(async (text2) => {
          if (text2.length > 0) {
            let value = parseFloat(text2);
            let refreshDisplay = false;
            if (value > 100) {
              value = 100;
              refreshDisplay = true;
            } else if (value < 0.1) {
              value = 0.1;
              refreshDisplay = true;
            }
            this.plugin.settings.occurrenceTypes[i].value = Number(value);
            await this.plugin.saveSettings();
            if (refreshDisplay) {
              this.display();
            }
          }
        });
      }).addExtraButton(
        (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
          this.plugin.settings.occurrenceTypes[i].value = DEFAULT_SETTINGS.occurrenceTypes[i].value;
          await this.plugin.saveSettings();
          this.display();
        })
      );
    }
    containerEl.createEl("h3", {
      text: "Occurence labels"
    });
    for (let i = 0; i < Object.keys(this.plugin.settings.occurrenceTypes).length; i++) {
      new import_obsidian.Setting(containerEl).setName(
        'Would you like to rename "' + this.plugin.settings.occurrenceTypes[i].label + '"?'
      ).addText((text) => {
        text.inputEl.type = "text";
        text.setPlaceholder(this.plugin.settings.occurrenceTypes[i].label).setValue(this.plugin.settings.occurrenceTypes[i].label).onChange(async (value) => {
          if (value.length > 0) {
            this.plugin.settings.occurrenceTypes[i].label = value;
            await this.plugin.saveSettings();
          }
        });
      }).addExtraButton(
        (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
          this.plugin.settings.occurrenceTypes[i].label = DEFAULT_SETTINGS.occurrenceTypes[i].label;
          await this.plugin.saveSettings();
          this.display();
        })
      );
    }
    containerEl.createEl("h3", {
      text: "Special characters"
    });
    new import_obsidian.Setting(containerEl).setName("Completed task").setDesc(
      "This character is used as prefix for completed tasks in the daily note"
    ).addText(
      (text) => text.setPlaceholder("{").setValue(this.plugin.settings.completedTaskCharacter).onChange(async (value) => {
        if (value.length > 0) {
          this.plugin.settings.completedTaskCharacter = value;
          await this.plugin.saveSettings();
        }
      })
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
        this.plugin.settings.completedTaskCharacter = DEFAULT_SETTINGS.completedTaskCharacter;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Start of metadata").setDesc("This character shows the start of the reward's data").addText(
      (text) => text.setPlaceholder("{").setValue(this.plugin.settings.escapeCharacterBegin).onChange(async (value) => {
        if (value.length > 0) {
          this.plugin.settings.escapeCharacterBegin = value;
          await this.plugin.saveSettings();
        }
      })
    ).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
        this.plugin.settings.escapeCharacterBegin = DEFAULT_SETTINGS.escapeCharacterBegin;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian.Setting(containerEl).setName("End of metadata").setDesc("This character shows the end of the reward's data").addText((text) => {
      text.setPlaceholder("}").setValue(this.plugin.settings.escapeCharacterEnd).onChange(async (value) => {
        if (value.length > 0) {
          this.plugin.settings.escapeCharacterEnd = value;
          await this.plugin.saveSettings();
        }
      });
    }).addExtraButton(
      (button) => button.setIcon("reset").setTooltip("Restore default").onClick(async () => {
        this.plugin.settings.escapeCharacterEnd = DEFAULT_SETTINGS.escapeCharacterEnd;
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};

// main.ts
async function getDailyNoteFile() {
  const file = (0, import_obsidian_daily_notes_interface2.getDailyNote)((0, import_obsidian2.moment)(), (0, import_obsidian_daily_notes_interface2.getAllDailyNotes)());
  if (!file) {
    return await (0, import_obsidian_daily_notes_interface2.createDailyNote)((0, import_obsidian2.moment)());
  }
  return file;
}
var ObsidianRewarder = class extends import_obsidian2.Plugin {
  async handleReward(clickedTaskText) {
    let arrayOfCleanedRewards = [];
    let chosenReward;
    let rewardsByOccurrence = {};
    const { vault } = this.app;
    const rewardsFile = vault.getAbstractFileByPath(this.settings.rewardsFile);
    if (rewardsFile === null || !(rewardsFile instanceof import_obsidian2.TFile)) {
      new import_obsidian2.Notice(
        "Obsidian Rewards couldn't open the rewards file.\nPlease check the path in the settings."
      );
      return;
    }
    let contents;
    try {
      contents = await this.app.vault.read(rewardsFile);
    } catch (e) {
      new import_obsidian2.Notice(
        "Obsidian Rewards couldn't open the rewards file.\nPlease check the path in the settings."
      );
      return;
    }
    var char = "\n";
    let x = 0;
    let y = 0;
    let dirtyRewards = [];
    while ((y = contents.indexOf(char, x)) !== -1) {
      dirtyRewards.push(contents.substring(x, y));
      x = y + 1;
    }
    dirtyRewards.push(contents.substring(x));
    for (let i = 0; i < dirtyRewards.length; i++) {
      const dirtyReward = dirtyRewards[i];
      let rewardsLeft = 1;
      let occurrence = this.settings.occurrenceTypes[0].label;
      let rewardName = "";
      let imageLink = "";
      let metadataValues = [];
      let metadataStart = [];
      let metadataEnd = [];
      let dirtyRewardWithPartialMetadataStripped = dirtyReward;
      for (let i2 = 0; i2 < 4; i2++) {
        metadataStart[i2] = dirtyRewardWithPartialMetadataStripped.indexOf(
          this.settings.escapeCharacterBegin
        );
        metadataEnd[i2] = dirtyRewardWithPartialMetadataStripped.indexOf(
          this.settings.escapeCharacterEnd,
          metadataStart[i2]
        );
        if (metadataStart[i2] < 0) {
          rewardName = dirtyRewardWithPartialMetadataStripped;
          break;
        } else {
          metadataValues[i2] = dirtyRewardWithPartialMetadataStripped.substring(
            metadataStart[i2] + 1,
            metadataEnd[i2]
          );
        }
        if (metadataValues[i2].substring(0, 6) === "app://" || metadataValues[i2].substring(0, 4) === "http") {
          imageLink = metadataValues[i2];
        } else if (/^\d+$/.test(metadataValues[i2])) {
          rewardsLeft = parseInt(metadataValues[i2]);
        } else {
          occurrence = metadataValues[i2];
        }
        dirtyRewardWithPartialMetadataStripped = dirtyRewardWithPartialMetadataStripped.replace(
          this.settings.escapeCharacterBegin + metadataValues[i2] + this.settings.escapeCharacterEnd,
          ""
        );
      }
      const rewardObject = {
        dirtyReward: dirtyRewards[i],
        rewardName: rewardName.replace(/\n|\t|\r|- |\* |\+ /g, "").trim(),
        rewardsLeft,
        occurrence,
        imageLink
      };
      if (rewardObject.rewardsLeft > 0) {
        arrayOfCleanedRewards.push(rewardObject);
        if (rewardsByOccurrence.hasOwnProperty(occurrence)) {
          rewardsByOccurrence[occurrence].push(rewardObject);
        } else {
          rewardsByOccurrence[occurrence] = [];
          rewardsByOccurrence[occurrence].push(rewardObject);
        }
      }
    }
    let foundOccurenceTypes = {
      [this.settings.occurrenceTypes[0].label]: 0,
      [this.settings.occurrenceTypes[1].label]: 0,
      [this.settings.occurrenceTypes[2].label]: 0
    };
    for (let i = 0; i < arrayOfCleanedRewards.length; i++) {
      foundOccurenceTypes[arrayOfCleanedRewards[i].occurrence] = foundOccurenceTypes[arrayOfCleanedRewards[i].occurrence] + 1;
    }
    let sumOfOccurrences = 0;
    for (let i = 0; i < this.settings.occurrenceTypes.length; i++) {
      if (foundOccurenceTypes[this.settings.occurrenceTypes[i].label] > 0) {
        sumOfOccurrences += this.settings.occurrenceTypes[i].value;
      }
    }
    if (sumOfOccurrences > 100) {
      const divideByThisToGetTo100 = sumOfOccurrences / 100;
      for (let i = 0; i < Object.keys(this.settings.occurrenceTypes).length; i++) {
        this.settings.occurrenceTypes[i].value = this.settings.occurrenceTypes[i].value / divideByThisToGetTo100;
      }
      sumOfOccurrences = this.settings.occurrenceTypes.reduce(
        (partialSum, a) => partialSum + a,
        0
      );
    }
    sumOfOccurrences = sumOfOccurrences * 10;
    const lotteryNumber = Math.floor(Math.random() * 1e3);
    if (lotteryNumber > sumOfOccurrences) {
      this.logToDailyNote(clickedTaskText, {}, true);
      return;
    }
    const objectOfOccurrences = {};
    for (let i = 0; i < this.settings.occurrenceTypes.length; i++) {
      objectOfOccurrences[this.settings.occurrenceTypes[i].label] = this.settings.occurrenceTypes[i].value;
    }
    const arrayOfOccurrences = Object.keys(foundOccurenceTypes);
    let checkedProbabilities = 0;
    for (let i = 0; i < arrayOfOccurrences.length; i++) {
      if (foundOccurenceTypes[arrayOfOccurrences[i]] > 0 && lotteryNumber < objectOfOccurrences[arrayOfOccurrences[i]] * 10 + checkedProbabilities) {
        const randomNumberToChooseRewardWithinOccurence = Math.floor(
          Math.random() * foundOccurenceTypes[arrayOfOccurrences[i]]
        );
        chosenReward = rewardsByOccurrence[arrayOfOccurrences[i]][randomNumberToChooseRewardWithinOccurence];
        break;
      }
      checkedProbabilities = checkedProbabilities + objectOfOccurrences[arrayOfOccurrences[i]] * 10;
    }
    let modifier;
    if (this.settings.showModal) {
      modifier = await displayModal(this.app, chosenReward, this.settings);
    } else {
      const stringToShow = this.settings.useAsInspirational ? chosenReward.rewardName : "\u{1F388} \u{1F389} \u{1F388} Congratulations! \u{1F388} \u{1F389} \u{1F388}\nBy completing this task you won this reward:\n \u2B50 " + chosenReward.rewardName + " \u2B50";
      new import_obsidian2.Notice(stringToShow);
    }
    let adjustedReward;
    if (chosenReward.rewardsLeft) {
      let newRewardsLeft = parseInt(chosenReward.rewardsLeft) + parseInt(modifier);
      adjustedReward = chosenReward.dirtyReward.replace(
        this.settings.escapeCharacterBegin + chosenReward.rewardsLeft + this.settings.escapeCharacterEnd,
        this.settings.escapeCharacterBegin + newRewardsLeft + this.settings.escapeCharacterEnd
      );
    } else {
      adjustedReward = chosenReward.dirtyReward;
    }
    let newContents = contents.replace(
      chosenReward.dirtyReward,
      adjustedReward
    );
    try {
      vault.modify(rewardsFile, newContents);
    } catch (e) {
      new import_obsidian2.Notice("Obsidian Rewards couldn't modify the rewards file.");
    }
    this.logToDailyNote(clickedTaskText, chosenReward, false);
  }
  async logToDailyNote(clickedTaskText, chosenReward, logTaskOnly) {
    let logTasksText = this.settings.saveTaskToDaily ? this.settings.completedTaskCharacter + clickedTaskText + " ([[" + this.app.workspace.getActiveFile().basename + "]]) - " + (0, import_obsidian2.moment)().format("HH:mm") : "";
    let logRewardsText = this.settings.saveRewardToDaily && logTaskOnly === false ? "Earned reward: " + chosenReward.rewardName : "";
    if ((this.settings.saveRewardToDaily === true || this.settings.saveTaskToDaily === true) && (0, import_obsidian_daily_notes_interface.appHasDailyNotesPluginLoaded)() === true) {
      let file = (await getDailyNoteFile()).path;
      let existingContent = await this.app.vault.adapter.read(file);
      if (existingContent.length > 0) {
        if (this.settings.saveTaskToDaily) {
          const saveTaskSectionHeading = this.settings.saveTaskSectionHeading;
          if (saveTaskSectionHeading) {
            const matches = existingContent.match(new RegExp("(?:^|\n)" + saveTaskSectionHeading + "[^\n]*\n.*?(?=\n*##?s?|$)", "gs"));
            if (matches && matches.length > 0) {
              const match = matches[0];
              existingContent = existingContent.replace(match, match + "\n" + logTasksText);
            } else {
              existingContent = existingContent + "\n" + logTasksText;
            }
          } else {
            existingContent = existingContent + "\n" + logTasksText;
          }
        }
        if (this.settings.saveRewardToDaily && logTaskOnly === false) {
          const saveRewardSectionHeading = this.settings.saveRewardSectionHeading;
          if (saveRewardSectionHeading) {
            const matches = existingContent.match(new RegExp("(?:^|\n)" + saveRewardSectionHeading + "[^\n]*\n.*?(?=\n*##?s?|$)", "gs"));
            if (matches && matches.length > 0) {
              const match = matches[0];
              existingContent = existingContent.replace(match, match + "\n" + logRewardsText);
            } else {
              existingContent = existingContent + "\n" + logRewardsText;
            }
          } else {
            existingContent = existingContent + "\n" + logRewardsText;
          }
        }
      }
      await this.app.vault.adapter.write(file, existingContent);
    }
  }
  async createSampleNote(self) {
    let folder = app.fileManager.getNewFileParent("");
    const createdNote = await app.fileManager.createNewMarkdownFile(
      folder,
      "Rewards.md"
    );
    const sampleContentsForNote = "- Have a cup of tea\n- Watch an episode of favourite series " + self.settings.escapeCharacterBegin + self.settings.occurrenceTypes[1].label + self.settings.escapeCharacterEnd + " " + self.settings.escapeCharacterBegin + "20" + self.settings.escapeCharacterEnd + "\n- Knit for 15 minutes " + self.settings.escapeCharacterBegin + self.settings.occurrenceTypes[1].label + self.settings.escapeCharacterEnd + " \n- Open the birthday present champagne bottle " + self.settings.escapeCharacterBegin + self.settings.occurrenceTypes[2].label + self.settings.escapeCharacterEnd + " " + self.settings.escapeCharacterBegin + "1" + self.settings.escapeCharacterEnd;
    app.vault.modify(createdNote, sampleContentsForNote);
    new import_obsidian2.Notice("Created file " + createdNote.path);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ObsidianRewarderSettingsTab(this.app, this));
    this.addCommand({
      id: "create-sample-rewards-note",
      name: "Create sample rewards note",
      callback: () => {
        this.createSampleNote(this);
      }
    });
    let callback = (evt) => {
      if (evt.target instanceof HTMLInputElement && evt.target.type === "checkbox" && evt.target.checked && (evt.target.parentNode.innerText.length > 0 || evt.target.parentNode.parentNode.innerText.length > 0)) {
        evt.target.parentNode.innerText.length > 0 ? this.handleReward(evt.target.parentNode.innerText) : this.handleReward(evt.target.parentNode.parentNode.innerText);
      }
    };
    window.addEventListener("click", callback, { capture: true });
    this.register(
      () => window.removeEventListener("click", callback, { capture: true })
    );
    if (this.app.workspace.layoutReady) {
      this.onLayoutReady();
    } else {
      this.app.workspace.on("layout-ready", this.onLayoutReady.bind(this));
    }
  }
  onLayoutReady() {
    const toggleCheckboxStatusCommand = this.app.commands.findCommand("editor:toggle-checklist-status");
    const that = this;
    around(toggleCheckboxStatusCommand, {
      editorCallback: (next) => function(editor) {
        next.call(this, editor);
        let cursor = editor.getCursor();
        let lineText = editor.getLine(cursor.line);
        const idx = lineText.search(/- \[x\] /);
        if (idx >= 0) {
          const checkedTaskText = lineText.substring(idx + 6);
          that.handleReward(checkedTaskText);
        }
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
async function displayModal(app2, rewardObject, settings) {
  return new Promise((resolve, reject) => {
    try {
      const modal = new CongratulationsModal(app2, rewardObject, settings);
      modal.onClose = () => {
        resolve(modal.modifier);
      };
      modal.open();
    } catch (e) {
      reject();
    }
  });
}
var CongratulationsModal = class extends import_obsidian2.Modal {
  constructor(app2, rewardObject, settings) {
    super(app2);
    this.rewardObject = rewardObject;
    this.settings = settings;
    this.modifier = -1;
  }
  onOpen() {
    const { contentEl, containerEl } = this;
    const modal = contentEl.createEl("div", { cls: "rewarderModal" });
    if (this.settings.useAsInspirational) {
      modal.createEl("h1", {
        text: this.rewardObject.rewardName
      });
      modal.createEl("img", {
        attr: {
          src: this.rewardObject.imageLink
        }
      });
    } else {
      modal.createEl("h2", {
        text: "Congratulations!"
      });
      modal.createEl("p", {
        text: "By completing this task you won this reward:"
      });
      modal.createEl("h1", {
        text: "\u2B50 " + this.rewardObject.rewardName + " \u2B50",
        cls: "rewardName"
      });
      modal.createEl("img", {
        attr: {
          src: this.rewardObject.imageLink
        }
      });
      modal.createEl("h2", {
        text: "\u{1F388} \u{1F389} \u{1F388}"
      });
      modal.createEl("button", {
        attr: { type: "button" },
        text: "Skip this reward"
      }).addEventListener("click", () => {
        this.modifier = 0;
        this.close();
      });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
